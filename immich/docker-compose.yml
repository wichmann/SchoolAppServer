services:
  immich-server:
    image: ${IMMICH_SERVER_IMAGE}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.immich.loadbalancer.server.port=2283"
      - "traefik.http.routers.immich.rule=Host(`${IMMICH_DOMAIN}`)"
      - "traefik.http.routers.immich.entrypoints=websecure"
      - "traefik.http.routers.immich.tls=true"
      - "traefik.http.routers.immich.tls.certresolver=letsencrypt"
    restart: always
    depends_on:
      - immich-redis
      - immich-database
    healthcheck:
      disable: false
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    environment:
      - REDIS_HOSTNAME=immich-redis
      - REDIS_PASSWORD=${IMMICH_REDIS_PASSWORD}
      - DB_HOSTNAME=immich-database
      - DB_USERNAME=immich
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - IMMICH_DOMAIN=${IMMICH_DOMAIN}
    networks:
      - immich_net

  immich-machine-learning:
    image: ${IMMICH_ML_IMAGE}
    volumes:
      - immich_model_cache:/cache
    restart: always
    healthcheck:
      disable: false
    networks:
      - immich_net

  immich-redis:
    image: ${IMMICH_REDIS_IMAGE}
    # Use Redis password from secrets file: https://stackoverflow.com/a/76353338
    command: sh -c "redis-server --requirepass ${IMMICH_REDIS_PASSWORD}"
    healthcheck:
      test: redis-cli ping || exit 1
      # test: ["CMD-SHELL", "redis-cli -a $(cat $$REDIS_PASSWORD_FILE) ping | grep PONG"]
    restart: always
    networks:
      - immich_net

  immich-database:
    image: ${IMMICH_DB_IMAGE}
    restart: always
    environment:
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_USER=immich
      - POSTGRES_DB=immich
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - immich_db_data:/var/lib/postgresql/data
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1;
        Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align
        --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
        echo "checksum failure count is $$Chksum";
        [ "$$Chksum" = '0' ] || exit 1
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on
    networks:
      - immich_net

volumes:
  immich_model_cache:
  immich_db_data:

networks:
  immich_net:
    # https://docs.docker.com/compose/networking/#use-a-pre-existing-network
    name: infrastructure_default
    external: true
